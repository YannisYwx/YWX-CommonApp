if (isBuildModule.toBoolean()) {
    //作为独立App应用运行
    apply plugin: 'com.android.application'
} else {
    //作为组件运行
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

kapt {
    generateStubs = true
    arguments {
        arg("moduleName", project.getName())
    }
}

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename)
        }
    } else {
        print(filename + " does not exist!")
    }
}

android {
    signingConfigs {
        debug {
//            storeFile file('E:\\Project\\Android\\thomas.jks')
//            storePassword '123698745'
//            keyAlias = 'thomas'
//            keyPassword '123698745'
        }
    }
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        flavorDimensions versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "Boolean", "IS_BUILD_MODULE", "${getProperty("gradle.properties", "isBuildModule")}"
        buildConfigField "String", "VP_BASE_URL", "\"https://www.baidu.com/\""

        //阿里路由框架配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
        multiDexEnabled true
        ndk {
            abiFilters "armeabi", "x86"
        }
        signingConfig signingConfigs.debug
    }
    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            java.srcDirs += 'src/main/module'
//            res.srcDirs += ['src\\home-res']
            if (isBuildModule.toBoolean()) {
                //单独运行
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                //合并到宿主中
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    exclude 'debug/**'
                }
            }
        }
    }

    //开启dataBinding
    dataBinding {
        enabled true
    }

    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}
dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation project(':lib-common')
    implementation project(':lib-res')
    implementation project(path: ':lib-third')
    implementation rootProject.ext.dependencies["rxbinding"]

    //组件中依赖阿里路由编译框架
    //annotationProcessor rootProject.ext.dependencies["arouter-compiler"]
    annotationProcessor rootProject.ext.dependencies["glide-compiler"]
    kapt "com.android.databinding:compiler:3.5.0"
    kapt rootProject.ext.dependencies["arouter-compiler"] // kotlin项目需要依赖kapt arouter-compiler
    /*协程*/
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.1"
}